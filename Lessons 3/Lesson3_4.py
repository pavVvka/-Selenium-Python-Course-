"""
https://stepik.org/lesson/237257/step/1?unit=209645

Python Testing с pytest. ГЛАВА 3 pytest Fixtures
https://habr.com/ru/post/448786/


Содержание урока

    Классические фикстуры (fixtures)
    Фикстуры, возвращающие значение
    Финализаторы — закрываем браузер
    Область видимости scope
    Автоиспользование фикстур
    Задание: область видимости фикстур



параметр -s, чтобы увидеть текст, который выводится командой print().
pytest -s test_fixture1.py
Вспомогательные функции — это очень мощная штука, которая решает много проблем при
работе с автотестами. Основной плюс в том, что
их удобно использовать в любых тестах без дублирования лишнего кода.

Дополнительные материалы про фикстуры, которые мы настоятельно советуем почитать:
https://habr.com/ru/company/yandex/blog/242795/
https://docs.pytest.org/en/stable/fixture.html


Функция browser, которая открывает браузер, если мы делаем её фикстурой, добавляя декоратор,
вызывается в каждом методе класса отдельно, где мы её указали в качестве аргумента.
Волшебный декоратор ещё и одновременно выполняет teardown в конце выполнения теста


==============  Финализаторы — закрываем браузер  ==============
https://stepik.org/lesson/237257/step/4?unit=209645

открытые окна браузеров могли привести к тому, что оперативная память закончилась бы
очень быстро. Поэтому надо явно закрывать браузеры после каждого теста.
Для этого мы можем воспользоваться финализаторами.
Один из вариантов финализатора — использование ключевого слова Python: yield.
После завершения теста, который вызывал фикстуру, выполнение фикстуры продолжится
со строки, следующей за строкой со словом yield:


Есть альтернативный способ вызова teardown кода с помощью встроенной
фикстуры request и ее метода addfinalizer.
Можете изучить его сами по документации PyTest.

Рекомендуем также выносить очистку данных и памяти в фикстуру, вместо того чтобы
писать это в шагах теста:
финализатор выполнится даже в ситуации, когда тест упал с ошибкой.


=========================   Область видимости scope   ==============================
https://stepik.org/lesson/237257/step/5?unit=209645

Для фикстур можно задавать область покрытия фикстур.
Допустимые значения: “function”, “class”, “module”, “session”.
Соответственно, фикстура будет вызываться один раз для
тестового метода, один раз для класса, один раз для модуля или один раз для всех тестов,
запущенных в данной сессии.

Запустим все наши тесты из класса TestMainPage1 в одном браузере для экономии времени,
задав scope="class" в фикстуре browser:

браузер открылся один раз и тесты последовательно выполнились в этом браузере.
Здесь мы проделали это в качестве примера, но мы крайне рекомендуем всё же запускать
отдельный экземпляр браузера для каждого теста, чтобы повысить стабильность тестов.
Фикстуры, которые занимают много времени для запуска и ресурсов
(обычно это работа с базами данных), можно вызывать и один раз за сессию запуска тестов.



========================    Автоиспользование фикстур
https://stepik.org/lesson/237257/step/6?unit=209645

При описании фикстуры можно указать дополнительный параметр autouse=True,
который укажет, что фикстуру нужно запустить для каждого теста даже без явного вызова:
test_fixture_autouse.py

 фикстура подготовки данных выполнилась без явного вызова.
 Нужно быть аккуратнее с этим параметром, потому что фикстура выполняется для всех тестов.
 Без явной необходимости автоиспользованием фикстур лучше не пользоваться.


"""



